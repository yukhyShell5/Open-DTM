# API Server Configuration
# Variables like REDIS_HOST, MINIO_ENDPOINT for the API server are set directly
# in the docker-compose.yml 'environment' section when running containerized,
# using Docker Compose service discovery names (e.g., 'redis', 'minio').
# These override defaults in app/config.py.
# If running app/main.py locally (outside Docker), these .env values would be used by app/config.py.
# E.g., for local dev:
# REDIS_HOST=localhost
# MINIO_ENDPOINT=localhost:9000
# MINIO_ACCESS_KEY=minioadmin
# MINIO_SECRET_KEY=minioadmin
# MINIO_USE_SSL=False

# Worker Configuration
# Variables for the worker service are also set in docker-compose.yml 'environment'.
# This .env file can be used to override those if `env_file: .env` is uncommented
# in docker-compose.yml for the worker service, or for local non-Docker execution.
TARGET_JOB_ID=your_specific_job_id_here # IMPORTANT: Set this for each worker to pick up a specific job
# WORKER_ID is auto-generated by default in workers/config.py if not set here.
# E.g., for local dev:
# WORKER_REDIS_HOST=localhost
# WORKER_MINIO_ENDPOINT=localhost:9000
# WORKER_MINIO_ACCESS_KEY=minioadmin
# WORKER_MINIO_SECRET_KEY=minioadmin

# Monitor Configuration
# Variables for the monitor service are also set in docker-compose.yml 'environment'.
# This .env file can be used to override those if `env_file: .env` is uncommented
# for the monitor service, or for local non-Docker execution.
# E.g., for local dev:
# MONITOR_REDIS_HOST=localhost
# STALE_TASK_TIMEOUT_SECONDS=300 
# MONITOR_POLL_INTERVAL_SECONDS=60 
# JOB_ID_PATTERN="job:*"

# General Note on .env usage with Docker Compose:
# - Environment variables set directly in `docker-compose.yml` under a service's `environment:` key
#   take precedence over variables defined in an `.env` file that Pydantic loads inside the container.
# - If you use `env_file: .env` in `docker-compose.yml` for a service, Docker Compose itself will
#   load variables from the .env file into the service's environment, potentially overriding
#   those set directly under `environment:`.
# - Pydantic settings files (`app/config.py`, `workers/config.py`, `scripts/config_monitor.py`)
#   are configured to load from an `.env` file by default. This is useful for local development
#   outside of Docker, or if you choose not to use Docker Compose's `environment` or `env_file` features extensively.
#   When running in Docker, the environment variables set by Docker Compose will be available to Pydantic.
