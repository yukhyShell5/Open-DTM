version: '3.8'

services:
  redis:
    image: redis:alpine
    ports:
      - "6379:6379" # Expose Redis to host for potential direct access/debugging
    volumes:
      - redis_data:/data
    networks:
      - app_network

  minio:
    image: minio/minio:latest
    ports:
      - "9000:9000" # API port
      - "9001:9001" # Console port
    volumes:
      - minio_data:/data
    environment:
      MINIO_ROOT_USER: minioadmin # Default access key
      MINIO_ROOT_PASSWORD: minioadmin # Default secret key
      MINIO_DEFAULT_BUCKETS: "wordlists" # Create 'wordlists' bucket on startup
    command: server /data --console-address ":9001"
    networks:
      - app_network

  api_server:
    build:
      context: .
      dockerfile: app/Dockerfile
    ports:
      - "8000:8000"
    depends_on:
      - redis
      - minio
    environment:
      # These will override defaults in app/config.py if .env file is not used inside container
      REDIS_HOST: redis
      REDIS_PORT: 6379
      MINIO_ENDPOINT: minio:9000
      MINIO_ACCESS_KEY: minioadmin
      MINIO_SECRET_KEY: minioadmin
      MINIO_USE_SSL: "False"
      # PYTHONUNBUFFERED: 1 # Already handled by -u in CMD often, but good practice
    # env_file: # Optionally use .env file for API server environment variables
    #   - .env 
    networks:
      - app_network
    volumes: # Mount app code for live reload during development (optional)
      - ./app:/app 

  worker:
    build:
      context: .
      dockerfile: workers/Dockerfile
    depends_on:
      - redis
      - minio
    environment:
      REDIS_HOST: redis
      REDIS_PORT: 6379
      MINIO_ENDPOINT: minio:9000
      MINIO_ACCESS_KEY: minioadmin
      MINIO_SECRET_KEY: minioadmin
      MINIO_USE_SSL: "False"
      # WORKER_ID can be set here or generated in worker.py
      # TARGET_JOB_ID could be set here if a worker instance is dedicated to a specific job
      # PYTHONUNBUFFERED: 1
    # env_file: # Optionally use .env file for worker environment variables
    #  - .env
    networks:
      - app_network
    # volumes: # Mount worker code for live reload (optional, less common for workers)
    #   - ./workers:/app_root/workers 
    #   - ./common:/app_root/common

  monitor:
    build:
      context: .
      dockerfile: scripts/Dockerfile.monitor
    depends_on:
      - redis
    environment:
      REDIS_HOST: redis # Connect to redis service defined in this docker-compose
      REDIS_PORT: 6379
      STALE_TASK_TIMEOUT_SECONDS: 300 
      MONITOR_POLL_INTERVAL_SECONDS: 60 
      JOB_ID_PATTERN: "job:*" 
      PYTHONUNBUFFERED: "1" # Ensure logs are sent straight to Docker logs
    networks:
      - app_network
    restart: unless-stopped

volumes:
  redis_data:
  minio_data:

networks:
  app_network:
    driver: bridge
